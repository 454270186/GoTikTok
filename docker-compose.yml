version: '3'

x-minio-common: &minio-common
  image: quay.io/minio/minio:latest
  command: server --console-address ":9001" http://minio{1...4}/data{1...2}
  expose:
    - "9000"
    - "9001" # TODO 不暴露9001端口号
  environment:
    MINIO_ROOT_USER: tiktokMinio
    MINIO_ROOT_PASSWORD: tiktokMinio
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    interval: 30s
    timeout: 20s
    retries: 3

services:
  mysql:
    image: 'mysql:latest'
    ports:
      - 8091:3306
    environment:
      - MYSQL_DATABASE=Tiktok
      - MYSQL_USER=xiaofei
      - MYSQL_PASSWORD=2021110003
      - MYSQL_RANDOM_ROOT_PASSWORD="yes"

  Etcd:
    image: 'bitnami/etcd:latest'
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
    ports:
      - 2379:2379

  # Open telemetry
  # otel-collector:
  #   image: otel/opentelemetry-collector-contrib-dev:latest
  #   command: [ "--config=/etc/otel-collector-config.yml", "${OTELCOL_ARGS}" ]
  #   volumes:
  #     - ./config/otel-collector-config.yml:/etc/otel-collector-config.yml
  #   ports:
  #     - "1888:1888"   # pprof extension
  #     - "8888:8888"   # Prometheus metrics exposed by the collector
  #     - "8889:8889"   # Prometheus exporter metrics
  #     - "13133:13133" # health_check extension
  #     - "4317:4317"   # OTLP gRPC receiver
  #     - "55670:55679" # zpages extension
  #   depends_on:
  #     - jaeger-all-in-one

  # Jaeger
  jaeger-all-in-one:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268" # port of jaeger collector
      - "14250:14250"
      - "6831:6831/udp"

  # # Victoriametrics
  # # open source time series database & monitoring solution
  # victoriametrics:
  #   container_name: victoriametrics
  #   image: victoriametrics/victoria-metrics
  #   ports:
  #     - "8428:8428"
  #     - "8089:8089"
  #     - "8089:8089/udp"
  #     - "2003:2003"
  #     - "2003:2003/udp"
  #     - "4242:4242"
  #   command:
  #     - '--storageDataPath=/storage'
  #     - '--graphiteListenAddr=:2003'
  #     - '--opentsdbListenAddr=:4242'
  #     - '--httpListenAddr=:8428'
  #     - '--influxListenAddr=:8089'
  #   restart: always

  # Prometheus
  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    restart: always
  # prometheus:
  #   image: prom/prometheus:latest
  #   restart: always
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - "./config/prometheus.yml:/etc/prometheus/prometheus.yml"
  #     - "./prometheus_data:/prometheus"

  # Grafana
  # grafana:
  #   image: grafana/grafana:latest
  #   environment:
  #     - GF_AUTH_ANONYMOUS_ENABLED=true
  #     - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
  #     - GF_AUTH_DISABLE_LOGIN_FORM=true
  #   ports:
  #     - "3000:3000"

  # starts 4 docker containers running minio server instances.
  # using nginx reverse proxy, load balancing, you can access
  # it through port 9000.
  # 高性能对象存储
  minio1:
    <<: *minio-common
    hostname: minio1
    volumes:
      - ./data/data1-1:/data1
      - ./data/data1-2:/data2

  minio2:
    <<: *minio-common
    hostname: minio2
    volumes:
      - ./data/data2-1:/data1
      - ./data/data2-2:/data2

  minio3:
    <<: *minio-common
    hostname: minio3
    volumes:
      - ./data/data3-1:/data1
      - ./data/data3-2:/data2

  minio4:
    <<: *minio-common
    hostname: minio4
    volumes:
      - ./data/data4-1:/data1
      - ./data/data4-2:/data2

  nginx:
    image: nginx:alpine
    hostname: nginx
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./log/nginx:/var/log/nginx:rw
      - ./data/cache/nginx:/usr/local/nginx/conf/cache:rw
    ports:
      - "9000:9000"
      - "9001:9001"
    depends_on:
      - minio1
      - minio2
      - minio3
      - minio4

  rabbitmq:
    image: rabbitmq:3.12-management
    ports:
      - "5672:5672"
      - "15672:15672"
      
  redis:
    container_name: redis
    image: redis:latest
    ports:
      - "6379:6379"
    command: redis-server --requirepass 2021110003